services:
  db:
    container_name: db-prod
    image: postgis/postgis
    pull_policy: always
    restart: always
    user: postgres
    environment:
      POSTGRES_PASSWORD: ${PWD_POSTGRES}
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 10
  backend:
    container_name: backend-prod
    image: cityguidewild/cityguidewild_server
    pull_policy: always
    ports:
      - 5000:5000
    environment:
      - NODE_ENV=production
      - SERVER_PORT=5000
    env_file:
      - ./.env
    volumes:
      - ./src:/app/src
    command:
      [sh, -cx, "npm run db:migration:run && npm run build && npm run prod"]
    healthcheck:
      test: 'curl --fail --request POST --header ''content-type: application/json'' --url ''http://localhost:5000/'' --data ''{"query":"query { __typename }"}'' || exit 1'
      interval: 5s
      timeout: 5s
      retries: 10
    depends_on:
      db:
        condition: service_healthy
  frontend:
    container_name: frontend-prod
    image: cityguidewild/cityguidewild_client
    pull_policy: always
    command: sh -c "npm run build"
    env_file:
      - ./.env
    environment:
      - NODE_ENV=production
    volumes:
      - web-client-build:/app/build
    ports:
      - 3000:3000
    depends_on:
      backend:
        condition: service_healthy
      images:
        condition: service_healthy
  nginx:
    image: nginx:1.21.3
    depends_on:
      - frontend
      - backend
      - db
      - adminer
    restart: always
    ports:
      - ${GATEWAY_PORT:-8000}:80
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - web-client-build:/web-client-build
      - ./logs:/var/log/nginx
  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
  images:
    container_name: images-service-prod
    env_file:
      - ./.env
    image: cityguidewild/cityguidewild-images-service
    pull_policy: always
    volumes:
      - ./images-service/uploads:/app/uploads
    command: [sh, -cx, "npm run build && npm run start-prod"]
    ports:
      - 18000:18000
    healthcheck:
      test: "curl --fail --request GET --url 'http://localhost:18000/images' || exit 1"
      interval: 5s
      timeout: 5s
      retries: 10
volumes:
  postgres:
  web-client-build:
